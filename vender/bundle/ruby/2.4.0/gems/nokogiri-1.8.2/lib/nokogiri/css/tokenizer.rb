#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.5
# from lexical definition file "lib/nokogiri/css/tokenizer.rex".
#++

module Nokogiri
  module CSS
    class Tokenizer # :nodoc:
      require 'strscan'
    
      class ScanError < StandardError; end
    
      attr_reader   :lineno
      attr_reader   :filename
      attr_accessor :state
    
      def scan_setup(str)
        @ss = StringScanner.new(str)
        @lineno = 1
        @state  = nil
      end
    
      def action
        yield
      end
    
      def scan_str(str)
        scan_setup(str)
        do_parse
      end
      alias scan scan_str
    
      def load_file(filename)
        @filename = filename
        open(filename, 'r') do |f|
          scan_setup(f.read)
        end
      end
    
      def scan_file(filename)
        load_file(filename)
        do_parse
      end  
    
      def next_token
        return if @ss.eos?
        
        # skips empty actions
        until (token = _next_token) || @ss.eos?; end
        token
      end
    
      def _next_token
        text = @ss.peek(1)
        @lineno += 1 if text == "\n"
        token = case @state
                when nil
                  if (text = @ss.scan(/has\([\s]*/))
                    action { [:HAS, text] }
            
                  elsif (text = @ss.scan(/[-@]?([_A-Za-z]|[^\0-\177]|\\[0-9A-Fa-f]{1,6}(\r\n|[\s])?|\\[^\n\r\f0-9A-Fa-f])([_A-Za-z0-9-]|[^\0-\177]|\\[0-9A-Fa-f]{1,6}(\r\n|[\s])?|\\[^\n\r\f0-9A-Fa-f])*\([\s]*/))
                    action { [:FUNCTION, text] }
            
                  elsif (text = @ss.scan(/[-@]?([_A-Za-z]|[^\0-\177]|\\[0-9A-Fa-f]{1,6}(\r\n|[\s])?|\\[^\n\r\f0-9A-Fa-f])([_A-Za-z0-9-]|[^\0-\177]|\\[0-9A-Fa-f]{1,6}(\r\n|[\s])?|\\[^\n\r\f0-9A-Fa-f])*/))
                    action { [:IDENT, text] }
            
                  elsif (text = @ss.scan(/\#([_A-Za-z0-9-]|[^\0-\177]|\\[0-9A-Fa-f]{1,6}(\r\n|[\s])?|\\[^\n\r\f0-9A-Fa-f])+/))
                    action { [:HASH, text] }
            
                  elsif (text = @ss.scan(/[\s]*~=[\s]*/))
                    action { [:INCLUDES, text] }
            
                  elsif (text = @ss.scan(/[\s]*\|=[\s]*/))
                    action { [:DASHMATCH, text] }
            
                  elsif (text = @ss.scan(/[\s]*\^=[\s]*/))
                    action { [:PREFIXMATCH, text] }
            
                  elsif (text = @ss.scan(/[\s]*\$=[\s]*/))
                    action { [:SUFFIXMATCH, text] }
            
                  elsif (text = @ss.scan(/[\s]*\*=[\s]*/))
                    action { [:SUBSTRINGMATCH, text] }
            
                  elsif (text = @ss.scan(/[\s]*!=[\s]*/))
                    action { [:NOT_EQUAL, text] }
            
                  elsif (text = @ss.scan(/[\s]*=[\s]*/))
                    action { [:EQUAL, text] }
            
                  elsif (text = @ss.scan(/[\s]*\)/))
                    action { [:RPAREN, text] }
            
                  elsif (text = @ss.scan(/\[[\s]*/))
                    action { [:LSQUARE, text] }
            
                  elsif (text = @ss.scan(/[\s]*\]/))
                    action { [:RSQUARE, text] }
            
                  elsif (text = @ss.scan(/[\s]*\+[\s]*/))
                    action { [:PLUS, text] }
            
                  elsif (text = @ss.scan(/[\s]*>[\s]*/))
                    action { [:GREATER, text] }
            
                  elsif (text = @ss.scan(/[\s]*,[\s]*/))
                    action { [:COMMA, text] }
            
                  elsif (text = @ss.scan(/[\s]*~[\s]*/))
                    action { [:TILDE, text] }
            
                  elsif (text = @ss.scan(/\:not\([\s]*/))
                    action { [:NOT, text] }
            
                  elsif (text = @ss.scan(/-?([0-9]+|[0-9]*\.[0-9]+)/))
                    action { [:NUMBER, text] }
            
                  elsif (text = @ss.scan(/[\s]*\/\/[\s]*/))
                    action { [:DOUBLESLASH, text] }
            
                  elsif (text = @ss.scan(/[\s]*\/[\s]*/))
                    action { [:SLASH, text] }
            
                  elsif (text = @ss.scan(/U\+[0-9a-f?]{1,6}(-[0-9a-f]{1,6})?/))
                    action { [:UNICODE_RANGE, text] }
            
                  elsif (text = @ss.scan(/[\s]+/))
                    action { [:S, text] }
            
                  elsif (text = @ss.scan(/"([^\n\r\f"]|\n|\r\n|\r|\f|[^\0-\177]|\\[0-9A-Fa-f]{1,6}(\r\n|[\s])?|\\[^\n\r\f0-9A-Fa-f])*"|'([^\n\r\f']|\n|\r\n|\r|\f|[^\0-\177]|\\[0-9A-Fa-f]{1,6}(\r\n|[\s])?|\\[^\n\r\f0-9A-Fa-f])*'/))
                    action { [:STRING, text] }
            
                  elsif (text = @ss.scan(/./))
                    action { [text, text] }
            
                  else
                    text = @ss.string[@ss.pos..-1]
                    raise  ScanError, "can not match: '" + text + "'"
                  end # if
    
                else
                  raise ScanError, "undefined state: '" + state.to_s + "'"
        end # case state
        token
      end # def _next_token
      end # class
  end
end
